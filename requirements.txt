# ==============================================================================
# ARQUIVO 1: requirements.txt
# (Este arquivo informa ao servidor quais pacotes Python instalar)
# ==============================================================================
Flask==2.2.2
openpyxl==3.1.2
pandas==1.5.3
flask-cors==3.0.10
gunicorn==20.1.0


# ==============================================================================
# ARQUIVO 2: app.py
# (Este é o seu script Python, adaptado para funcionar como um serviço web)
# ==============================================================================
import pandas as pd
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment, Border, Side, PatternFill
from openpyxl.utils import get_column_letter
from decimal import Decimal, getcontext
from flask import Flask, request, jsonify, send_file
from flask_cors import CORS
import io
import os

app = Flask(__name__)
CORS(app) # Permite que seu site no Netlify se comunique com este serviço

@app.route('/generate-checklist', methods=['POST'])
def gerar_principal_com_orcamento():
    try:
        payload = request.get_json()
        if not payload:
            return jsonify({"error": "Payload Vazio"}), 400

        header_info = payload.get('header_info', {})
        tickets_data = payload.get('tickets', [])

        if not tickets_data:
            return jsonify({"error": "Nenhum ticket fornecido"}), 400
            
        # O seu script Python original começa aqui, adaptado para usar os dados recebidos
        # --- PREPARAÇÃO DOS DADOS ---
        df_original_para_calculos = pd.DataFrame(tickets_data)
        todos_aeroportos = set()
        for t in tickets_data:
            if 'aeroportos_nacionais' in t and t['aeroportos_nacionais']:
                for ap in t['aeroportos_nacionais'].keys():
                    todos_aeroportos.add(ap)
        
        for index, row in df_original_para_calculos.iterrows():
            for ap in todos_aeroportos:
                if 'aeroportos_nacionais' in row and ap in row['aeroportos_nacionais']:
                    df_original_para_calculos.at[index, ap] = row['aeroportos_nacionais'][ap]
                else:
                    df_original_para_calculos.at[index, ap] = 0

        getcontext().prec = 10 
        numeric_cols = ['tarifa', 'taxa_embarque', 'agenciamento', 'outras_taxas'] + list(todos_aeroportos)
        for col in numeric_cols:
            if col in df_original_para_calculos.columns:
                 df_original_para_calculos[col] = pd.to_numeric(df_original_para_calculos[col], errors='coerce').fillna(0)
                 df_original_para_calculos[col] = df_original_para_calculos[col].apply(lambda x: Decimal(str(x)))
            else:
                 df_original_para_calculos[col] = Decimal('0.00')

        df_original_para_calculos['natureza'] = df_original_para_calculos['natureza'].astype(str).str.strip().str.lower()
        df_original_para_calculos['fornecedor'] = df_original_para_calculos['fornecedor'].astype(str).str.strip().str.upper()
        df_original_para_calculos['empenho'] = df_original_para_calculos['empenho'].astype(str).str.strip()

        # --- LÓGICA DE CÁLCULO ---
        cias_nacionais = ["LATAM", "GOL", "AZUL"]
        agenciamento_empenho = "2025NE000148"
        deducoes_34_detalhe = []
        deducoes_705_detalhe = []
        deducoes_5_detalhe = []
        totais_por_empenho = {}

        for _, row in df_original_para_calculos.iterrows():
            empenho = row["empenho"]
            if empenho != agenciamento_empenho:
                if empenho not in totais_por_empenho:
                    totais_por_empenho[empenho] = {'valor_bruto': Decimal(0), 'deducao': Decimal(0)}
                
                total_aeroportos_row = sum(row.get(ap, Decimal(0)) for ap in todos_aeroportos)
                totais_por_empenho[empenho]['valor_bruto'] += row['tarifa'] + row['taxa_embarque'] + row['outras_taxas'] + total_aeroportos_row

        agenciamento_aereo_total = df_original_para_calculos[df_original_para_calculos['natureza'].str.contains('aereo', na=False)]['agenciamento'].sum()
        agenciamento_seguro_total = df_original_para_calculos[df_original_para_calculos['natureza'].str.contains('seguro', na=False)]['agenciamento'].sum()
        total_agenciamento_grupo = agenciamento_aereo_total + agenciamento_seguro_total

        if total_agenciamento_grupo > 0:
             totais_por_empenho[agenciamento_empenho] = {'valor_bruto': total_agenciamento_grupo, 'deducao': Decimal(0)}

        for _, row in df_original_para_calculos.iterrows():
            empenho = row['empenho']
            fornecedor = row['fornecedor']
            tarifa = row['tarifa']
            
            if any(cia in fornecedor for cia in cias_nacionais) and tarifa > 0:
                deducao = (tarifa * Decimal('0.034')).quantize(Decimal('0.01'))
                if empenho in totais_por_empenho:
                    totais_por_empenho[empenho]['deducao'] += deducao
                deducoes_34_detalhe.append(["DDF 025 - DARF - Impostos Federais", empenho, "", "", 8850, 17024, fornecedor, float(tarifa), float(deducao)])

            # ... Restante da sua lógica de cálculo de deduções ...

        if total_agenciamento_grupo > 0:
            deducao_5 = (total_agenciamento_grupo * Decimal('0.05')).quantize(Decimal('0.01'))
            totais_por_empenho[agenciamento_empenho]['deducao'] = deducao_5
            deducoes_5_detalhe.append(["DDR001 - DAR - Imposto Municipal", agenciamento_empenho, "239182/239183", "06.064.175/0001-49", "9701 / 1782", "AIRES", 17023, float(total_agenciamento_grupo), float(deducao_5)])

        wb = Workbook()
        ws = wb.active
        ws.title = "LISTA DE CONFERÊNCIA"

        # --- APLICAÇÃO DE ESTILOS E DADOS ---
        # (Lógica de formatação do openpyxl aqui)
        
        file_stream = io.BytesIO()
        wb.save(file_stream)
        file_stream.seek(0)

        return send_file(
            file_stream,
            as_attachment=True,
            download_name='checklist_pagamento.xlsx',
            mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
    except Exception as e:
        app.logger.error(f"Erro ao gerar checklist: {e}")
        return jsonify({"error": "Erro interno no servidor ao gerar o arquivo."}), 500

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port)
```
